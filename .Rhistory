dir.create(filtered_folder)
}
# List all .tsv files in the data folder with full paths
tsv_files <- list.files(path = data_folder, pattern = "\\.tsv$", full.names = TRUE)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 1:10)
# Loop through each .tsv file, remove header lines, reorder columns, remove the first row, and save as .txt separately
for (file_path in tsv_files) {
# Read the .tsv file using read.delim() without row names and skip lines starting with "@"
data <- read.delim(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE, row.names = NULL, comment.char = "@")
# Remove header lines (lines starting with "@") from the data frame
data <- data[!grepl("^@", data[, 1]), ]
# Reorder columns
data <- data[, c(1, 2, 5, 3, 6, 4)]
# Remove the first row (which might contain the column names)
data <- data[-1, ]
# Filter rows to keep only those with valid chromosome names
data <- data[data[, 1] %in% valid_chromosomes, ]
# Get the original file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the path to save the modified file as .txt in the "data/filtered" directory
save_path <- file.path(filtered_folder, paste0(file_name, ".txt"))
# Save the modified data as a tab-delimited text file with no colnames or rownames without quotes
write.table(data, file = save_path, sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
# Print a message indicating the file has been processed and saved
cat(paste("Processed and saved:", save_path), "\n")
}
rm(data)
# Get paths to allele count files
file_paths = list.files(path = paste0(getwd(),"/data/filtered"), pattern = "\\.txt$", full.names=T)
# Get sample names
sampleIDs <- basename(file_paths)
# Remove the .txt extension and "allelicCounts" part from sampleIDs
sampleIDs <- gsub("\\.txt$", "", sampleIDs)
sampleIDs <- gsub("\\.allelicCounts$", "", sample_names)
# Create the expDesign object
expDesign = data.frame(files=file_paths, name=sampleIDs)
# Get sample names
sampleIDs <- basename(file_paths)
# Remove the .txt extension and "allelicCounts" part from sampleIDs
sampleIDs <- gsub("\\.txt$", "", sampleIDs)
sampleIDs <- gsub("\\.allelicCounts$", "", sampleIDs)
# Create the expDesign object
expDesign = data.frame(files=file_paths, name=sampleIDs)
# Get chromosome lengths for the example data included in the package
# chromosome length from the alleliccount file
# Create the "SN" and "chr" names
chr_len <- c(308452471,243675191,238017767,250330460,226353449,181357234,185808916,182411202,163004744,152435371)
names(chr_len) <- c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10')
typeof(chr_len)
class(chr_len)
print(chr_len)
system("ls data/filtered")
output <- paste0(getwd(),"/result")
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
save.results = TRUE)
# Set the directory path to your data folder
data_folder <- paste0(getwd(), "/data")
# Create the "data/filtered" directory if it doesn't exist
filtered_folder <- file.path(data_folder, "filtered")
if (!dir.exists(filtered_folder)) {
dir.create(filtered_folder)
}
# List all .tsv files in the data folder with full paths
tsv_files <- list.files(path = data_folder, pattern = "\\.tsv$", full.names = TRUE)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 9:10)
# Loop through each .tsv file, remove header lines, reorder columns, remove the first row, and save as .txt separately
for (file_path in tsv_files) {
# Read the .tsv file using read.delim() without row names and skip lines starting with "@"
data <- read.delim(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE, row.names = NULL, comment.char = "@")
# Remove header lines (lines starting with "@") from the data frame
data <- data[!grepl("^@", data[, 1]), ]
# Reorder columns
data <- data[, c(1, 2, 5, 3, 6, 4)]
# Remove the first row (which might contain the column names)
data <- data[-1, ]
# Filter rows to keep only those with valid chromosome names
data <- data[data[, 1] %in% valid_chromosomes, ]
# Get the original file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the path to save the modified file as .txt in the "data/filtered" directory
save_path <- file.path(filtered_folder, paste0(file_name, ".txt"))
# Save the modified data as a tab-delimited text file with no colnames or rownames without quotes
write.table(data, file = save_path, sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
# Print a message indicating the file has been processed and saved
cat(paste("Processed and saved:", save_path), "\n")
}
rm(data)
# Get paths to allele count files
file_paths = list.files(path = paste0(getwd(),"/data/filtered"), pattern = "\\.txt$", full.names=T)
# Get sample names
sampleIDs <- basename(file_paths)
# Remove the .txt extension and "allelicCounts" part from sampleIDs
sampleIDs <- gsub("\\.txt$", "", sampleIDs)
sampleIDs <- gsub("\\.allelicCounts$", "", sampleIDs)
# Create the expDesign object
expDesign = data.frame(files=file_paths, name=sampleIDs)
# Get chromosome lengths for the example data included in the package
# chromosome length from the alleliccount file
# Create the "SN" and "chr" names
#chr_len <- c(308452471,243675191,238017767,250330460,226353449,181357234,185808916,182411202,163004744,152435371)
chr_len <- c(182411202,163004744,152435371)
#names(chr_len) <- c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10')
names(chr_len) <- c('chr8','chr9','chr10')
# Running the RTIGER function that identifies Introgression regions
output <- paste0(getwd(),"/result")
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 1,
autotune = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = getwd(),
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
save.results = TRUE)
expDesign
# Get chromosome lengths for the example data included in the package
# chromosome length from the alleliccount file
# Create the "SN" and "chr" names
#chr_len <- c(308452471,243675191,238017767,250330460,226353449,181357234,185808916,182411202,163004744,152435371)
chr_len <- c(163004744,152435371)
#names(chr_len) <- c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10')
names(chr_len) <- c('chr9','chr10')
# Running the RTIGER function that identifies Introgression regions
output <- paste0(getwd(),"/result")
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
save.results = TRUE)
?RTIGER()
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = FALSE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = FALSE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = FALSE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
post.processing = FALSE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = TRUE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
post.processing = FALSE,
save.results = TRUE)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 8:10)
# Loop through each .tsv file, remove header lines, reorder columns, remove the first row, and save as .txt separately
for (file_path in tsv_files) {
# Read the .tsv file using read.delim() without row names and skip lines starting with "@"
data <- read.delim(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE, row.names = NULL, comment.char = "@")
# Remove header lines (lines starting with "@") from the data frame
data <- data[!grepl("^@", data[, 1]), ]
# Reorder columns
data <- data[, c(1, 2, 5, 3, 6, 4)]
# Remove the first row (which might contain the column names)
data <- data[-1, ]
# Filter rows to keep only those with valid chromosome names
data <- data[data[, 1] %in% valid_chromosomes, ]
# Get the original file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the path to save the modified file as .txt in the "data/filtered" directory
save_path <- file.path(filtered_folder, paste0(file_name, ".txt"))
# Save the modified data as a tab-delimited text file with no colnames or rownames without quotes
write.table(data, file = save_path, sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
# Print a message indicating the file has been processed and saved
cat(paste("Processed and saved:", save_path), "\n")
}
# Set the directory path to your data folder
data_folder <- paste0(getwd(), "/data")
# Create the "data/filtered" directory if it doesn't exist
filtered_folder <- file.path(data_folder, "filtered")
if (!dir.exists(filtered_folder)) {
dir.create(filtered_folder)
}
# List all .tsv files in the data folder with full paths
tsv_files <- list.files(path = data_folder, pattern = "\\.tsv$", full.names = TRUE)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 8:10)
# Loop through each .tsv file, remove header lines, reorder columns, remove the first row, and save as .txt separately
for (file_path in tsv_files) {
# Read the .tsv file using read.delim() without row names and skip lines starting with "@"
data <- read.delim(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE, row.names = NULL, comment.char = "@")
# Remove header lines (lines starting with "@") from the data frame
data <- data[!grepl("^@", data[, 1]), ]
# Reorder columns
data <- data[, c(1, 2, 5, 3, 6, 4)]
# Remove the first row (which might contain the column names)
data <- data[-1, ]
# Filter rows to keep only those with valid chromosome names
data <- data[data[, 1] %in% valid_chromosomes, ]
# Get the original file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the path to save the modified file as .txt in the "data/filtered" directory
save_path <- file.path(filtered_folder, paste0(file_name, ".txt"))
# Save the modified data as a tab-delimited text file with no colnames or rownames without quotes
write.table(data, file = save_path, sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
# Print a message indicating the file has been processed and saved
cat(paste("Processed and saved:", save_path), "\n")
}
rm(data)
# Get paths to allele count files
file_paths = list.files(path = paste0(getwd(),"/data/filtered"), pattern = "\\.txt$", full.names=T)
# Get sample names
sampleIDs <- basename(file_paths)
# Remove the .txt extension and "allelicCounts" part from sampleIDs
sampleIDs <- gsub("\\.txt$", "", sampleIDs)
sampleIDs <- gsub("\\.allelicCounts$", "", sampleIDs)
# Create the expDesign object
expDesign = data.frame(files=file_paths, name=sampleIDs)
# Get chromosome lengths for the example data included in the package
# chromosome length from the alleliccount file
# Create the "SN" and "chr" names
#chr_len <- c(308452471,243675191,238017767,250330460,226353449,181357234,185808916,182411202,163004744,152435371)
chr_len <- c(182411202,163004744,152435371)
#names(chr_len) <- c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10')
names(chr_len) <- c('chr8','chr9','chr10')
# Running the RTIGER function that identifies Introgression regions
output <- paste0(getwd(),"/result")
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = TRUE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
post.processing = FALSE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = TRUE,
average_coverage = 0.8,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 512,
autotune = TRUE,
average_coverage = 0.8,
nstates = 2,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 500,
autotune = TRUE,
average_coverage = 0.8,
nstates = 3,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
average_coverage = 0.8,
nstates = 3,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
average_coverage = 0.8,
nstates = 2,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
152435371*0.00000662
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
average_coverage = 0.8,
nstates = 3,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
### SETUP
# Done once
#setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# Needs to be run everytime we load RTIGER
sourceJulia()
# Set the directory path to your data folder
data_folder <- paste0(getwd(), "/data")
# Create the "data/filtered" directory if it doesn't exist
filtered_folder <- file.path(data_folder, "filtered")
if (!dir.exists(filtered_folder)) {
dir.create(filtered_folder)
}
# List all .tsv files in the data folder with full paths
tsv_files <- list.files(path = data_folder, pattern = "\\.tsv$", full.names = TRUE)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 8:10)
# Define the valid chromosome names you want to keep
valid_chromosomes <- paste0("chr", 10)
# Loop through each .tsv file, remove header lines, reorder columns, remove the first row, and save as .txt separately
for (file_path in tsv_files) {
# Read the .tsv file using read.delim() without row names and skip lines starting with "@"
data <- read.delim(file_path, header = FALSE, sep = "\t", stringsAsFactors = FALSE, row.names = NULL, comment.char = "@")
# Remove header lines (lines starting with "@") from the data frame
data <- data[!grepl("^@", data[, 1]), ]
# Reorder columns
data <- data[, c(1, 2, 5, 3, 6, 4)]
# Remove the first row (which might contain the column names)
data <- data[-1, ]
# Filter rows to keep only those with valid chromosome names
data <- data[data[, 1] %in% valid_chromosomes, ]
# Get the original file name without extension
file_name <- tools::file_path_sans_ext(basename(file_path))
# Define the path to save the modified file as .txt in the "data/filtered" directory
save_path <- file.path(filtered_folder, paste0(file_name, ".txt"))
# Save the modified data as a tab-delimited text file with no colnames or rownames without quotes
write.table(data, file = save_path, sep = "\t", col.names = FALSE, row.names = FALSE, quote = FALSE)
# Print a message indicating the file has been processed and saved
cat(paste("Processed and saved:", save_path), "\n")
}
rm(data)
# Get paths to allele count files
file_paths = list.files(path = paste0(getwd(),"/data/filtered"), pattern = "\\.txt$", full.names=T)
# Get sample names
sampleIDs <- basename(file_paths)
# Remove the .txt extension and "allelicCounts" part from sampleIDs
sampleIDs <- gsub("\\.txt$", "", sampleIDs)
sampleIDs <- gsub("\\.allelicCounts$", "", sampleIDs)
# Create the expDesign object
expDesign = data.frame(files=file_paths, name=sampleIDs)
# Get chromosome lengths for the example data included in the package
# chromosome length from the alleliccount file
# Create the "SN" and "chr" names
#chr_len <- c(308452471,243675191,238017767,250330460,226353449,181357234,185808916,182411202,163004744,152435371)
chr_len <- c(152435371)
#names(chr_len) <- c('chr1','chr2','chr3','chr4','chr5','chr6','chr7','chr8','chr9','chr10')
names(chr_len) <- c('chr10')
# Running the RTIGER function that identifies Introgression regions
output <- paste0(getwd(),"/result")
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
average_coverage = 0.8,
nstates = 3,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# Needs to be run everytime we load RTIGER
sourceJulia()
myres = RTIGER(expDesign = expDesign,
outputdir = output,
seqlengths = chr_len,
rigidity = 20,
autotune = TRUE,
average_coverage = 0.8,
nstates = 3,
crossovers_per_megabase = 3,
post.processing = TRUE,
save.results = TRUE)
BiocManager::install("STAN")
library(STAN)
BiocManager::install(version=3.14)
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
# Needs to be run everytime we load RTIGER
sourceJulia()
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# Needs to be run everytime we load RTIGER
sourceJulia()
rm(list=ls())
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
# Needs to be run everytime we load RTIGER
sourceJulia()
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.8.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
version
BiocManager::install(version=3.14)
BiocManager::install("STAN")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
### SETUP
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
# Packages
#BiocManager::install(version = "3.14")
#BiocManager::install(c("GenomicRanges", "GenomeInfoDb", "TailRank", "IRanges", "Gviz"))
#install.packages("JuliaCall")
library(JuliaCall)
#install.packages("RTIGER")
library(RTIGER)
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.0.app/Contents/Resources/julia/bin")
### SETUP
# Done once
setupJulia(JULIA_HOME="/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
